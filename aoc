#!/bin/env python3

from sys import argv, exit
import importlib
import os

from typing import Callable

from mako.template import Template

TEMPLATE_DIR = './template'
MAIN_FILE = 'main.py'
INPUT_FILE = 'input.txt'


def usage():
    print('Usage:')
    print(f'\t{argv[0]} [create] <number>')
    exit(1)


def check_num_args(number_of_args: int):
    if len(argv) - 1 != number_of_args:
        usage()


def create_task(task_num: str):
    print(f'Creating task {task_num}...')
    task_template = Template(filename=f'{TEMPLATE_DIR}/{MAIN_FILE}')
    os.makedirs(f'./{task_num}', exist_ok=True)
    with open(f'./{task_num}/{MAIN_FILE}', 'w') as fd:
        fd.write(task_template.render(task_num=task_num))
    with open(f'./{task_num}/{INPUT_FILE}', 'w') as fd:
        fd.write('')


def run_if_implemented(callback: Callable, name: str):
    try:
        callback()
    except NotImplementedError:
        print(f'Oops, looks like {name} is not implemented yet!')


def import_if_exists(task_num: str):
    try:
        return importlib.import_module(f'{task_num}.main')
    except ModuleNotFoundError:
        print(f'Oops, looks like task {task_num} was not created yet!')
        print(f'Create it with {argv[0]} create {task_num}.')
        exit(1)


def run_task(task_num: str, subtask_num: str = ''):
    print(f'Executing task {task_num}{subtask_num}...')
    task = import_if_exists(task_num)
    if subtask_num.lower() == 'a':
        run_if_implemented(lambda: task.run_a(), f'task {task_num}a')
    elif subtask_num.lower() == 'b':
        run_if_implemented(lambda: task.run_b(), f'task {task_num}b')
    else:
        run_if_implemented(lambda: task.run(), f'task {task_num}')


def main():
    if len(argv) < 2:
        usage()
    if 'create'.startswith(argv[1]):
        check_num_args(2)
        create_task(argv[2].zfill(2))
    elif argv[1].isnumeric():
        subtask_num = ''
        if len(argv) > 2:
            subtask_num = argv[2]
        run_task(argv[1].zfill(2), subtask_num)
    else:
        usage()


if __name__ == '__main__':
    main()
